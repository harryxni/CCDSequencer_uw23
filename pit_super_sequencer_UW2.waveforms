; *********************************************************************
; Waveform tables and definitions for the Skipper CCDs
; For DAMIC - M prototyping at UW.
; This is Version UW2 - for 1k x 6k skipper ccd onwards
; (Clk Lines changed!!)
; by Pitam Mitra, 2018.
; License: GNU Affero V3
;
; I have improved the commenting and the structure of the waveform files
; by like a lot so it isnt a hodgepodge if variables. Old variables
; and weird comments like Juan's crate doesnt work etc
; are removed.
;
; Hardware used: Leach ARC32 board + timing + bias + video
;
; Copyright (C) 2019 Pitam Mitra
;
; This program is free software: you can redistribute it and/or modify
; it under the terms of the GNU Affero General Public License as published
; by the Free Software Foundation, either version 3 of the License, or
; (at your option) any later version.

; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU Affero General Public License for more details.

; You should have received a copy of the GNU Affero General Public License
; along with this program. If not, see <https://www.gnu.org/licenses/>.
; **********************************************************************

Vmax	EQU    +12.4		; ARC32 clock driver board max. voltage

; Miscellaneous definitions
VIDEO           EQU     $000000 ; Video processor board select = 0
CLK2            EQU     $002000 ; Clock driver board select = 2
CLK3            EQU     $003000 ; Clock driver board select = 3

;NS_CLR and NP_CLR defines how many clock cycles to execute before
;acquisition begins
NS_CLR		EQU	0    ; Horizontal clocks to clear
NP_CLR		EQU	0    ; Parallel clocks to clear

;The next section is dedicated to the timing. It holds for Y:<I_DELAY, P_DELAY
; and every other kind of delay programmed in this waveform table.
;It is calculated as follows:
;
;Each line of the CCD carries 24 bits. Out of these, bits #23-16
;define how many clock cycles the present instruction will be held.
;If bit #23 = 1 then bits 22-16 specify the number of 640ns cycles that
;bits 15-0 will be held.
;If bit #23 = 0 then bits 22-16 specify the number of 40ns cycles that
;bits 15-0 will be held.


;This is the integration period.
;I_DELAY 	EQU     $870000

; Delay numbers for clocking 
P_DELAY         EQU     $C80000 ; Parallel clock delay 
R_DELAY         EQU     $0C0000 ; Serial register transfer delay

;Serial register skipping and summing well delays.
S_DELAY         EQU     $060000 ; Serial register skipping delay
SW_DELAY        EQU     $0C0000 ; Sum_well  clock delay 
VE_DELAY	EQU	$320000

;98 KHz clocking wavefors
;PRE_SET_DLY     EQU     $0C0000 ;
;POST_SET_DLY    EQU     $0C0000 ;
DCRST_DELAY     EQU     $030000 ; settling time 

; Macros to help getting from volts to bits.

VDEF    MACRO   NAME,BRDTYP,BRDNUM,DAC,ALO,AHI

LO_\NAME        EQU     ALO
HI_\NAME        EQU     AHI
DAC_\NAME       EQU     DAC
BRDNUM_\NAME    EQU     BRDNUM
        IF      @SCP("BRDTYP",'VID')
BRDTYP_\NAME    EQU     3
        ELSE
BRDTYP_\NAME    EQU     0
        ENDIF

        MSG     'Defining voltage ',"NAME",' type ',"BRDTYP",' board ',"BRDNUM",' dac ',"DAC",' with limits ',"ALO",' ',"AHI"
        ENDM

VOLTS   MACRO   NAME,F

DUMMY   SET     @CVI(@MIN(4095,@MAX(0,(F-LO_\NAME)/(HI_\NAME-LO_\NAME)*4096.)))
DUMMY2  SET     @CVI((BRDNUM_\NAME<<20)|(BRDTYP_\NAME<<18)|(DAC_\NAME<<14)|DUMMY)
        DC      DUMMY2
        MSG     'Setting voltage ',"NAME ","F",'V ',DUMMY
        ENDM


;The next section assigns the pinouts for the clocking board. The Leach system has 
;two banks of pinouts. Each bank, is assigned to a clock. Pins 1-12 are assigned to
;CLK2 and pins 13-19 and 33-37 are assigned to CLK3. The pin assignments are done as:
;
; Pin 1= 0x1
; Pin 2 = 0x2
; Pin 3 = 0x4
; Pin 4 = 0x8
; Pin 5 = 0x10
;so on and so forth. You can assign multiple pins by adding two such numbers.
;Example: Pin 1&2 = 0x3.
;
;When you change a certain clock, ALL pins attached to that clock will change. You
;should manually define the state of ALL pins in that clock to make sure
;that pins you forgot doesnt change inadvertently.


;Bank 0 - The pins attached to CLK2

;The vertical registers
OneV1L     EQU     0
OneV1H     EQU     $1
OneV2L     EQU     0
OneV2H     EQU     $2
OneV3L     EQU     0
OneV3H     EQU     $4
TwoV1L     EQU     0
TwoV1H     EQU     $8
TwoV2L     EQU     0
TwoV2H     EQU     $10
TwoV3L     EQU     0
TwoV3H     EQU     $20

; Transfer gate
OneTL      EQU     0
OneTH      EQU     $40
TwoTL      EQU     0
TwoTH      EQU     $100

;Skipper output gate OG
OUTGL	EQU	0
OUTGH	EQU	$280	; skipper output gate - Pins 8 (0x80) + 10 (0x200) on CLK2


;Bank 1 - The pins attached to CLK3

;The horizontal pins
HL1L    EQU     0
HL1H    EQU     $001    
HL2L    EQU     0
HL2H    EQU     $002    
HL3L    EQU     0
HL3H    EQU     $004   
HU1L    EQU     0       
HU1H    EQU     $008  
HU2L    EQU     0       
HU2H    EQU     $010     
HU3L    EQU     0      
HU3H    EQU     $020    

;Skipper output gate SW. Both summing wells clocked together.
WL      EQU     0
WH      EQU     $840    ; $840 = pins 19, (0x40) + 37 (0x800)

; Reset both output nodes
RL      EQU     0       
RH      EQU     $500	; $300 = pin 34 (0x100) + pin 36 (0x400)

;Dump gates on both sides of the CCD
DUMPGH	EQU	$280	; pin 33 (0x80) + pin 35 (0x200)
DUMPGL	EQU	0

;******************************
;* VERTICAL REGISTER SECTION  *
;******************************
;  
;Parallel clock direction is V1->V2->V3 in the normal configuration.
;According to the excel spreadsheet of the pinouts, the pins I see are
;(side 2) V1,V2,V3 V3,V2,V1 (side 1)
;Therefore the sequence to drive the charges
;in the same direction will be the opposite on OneV and TwoV.
;Page 4 of the 4k by 2k manual illustrates the same principle for
;that CCD as well but they cross bonded the pads to get over this
;effect.

PARALLEL_1
        DC      PARALLEL_2-PARALLEL_1-1
        ;Starting point : V1H-V2L-V3H along with TH+OUTGH
        DC      CLK2+P_DELAY+OUTGH+TwoTH+TwoV1H+TwoV2L+TwoV3H+OneV3H+OneV2L+OneV1H+OneTL      ;HLH-HLH
        DC      CLK2+P_DELAY+OUTGH+TwoTH+TwoV1H+TwoV2L+TwoV3L+OneV3H+OneV2L+OneV1L+OneTL      ;HLL-HLL
        DC      CLK2+P_DELAY+OUTGH+TwoTH+TwoV1H+TwoV2H+TwoV3L+OneV3H+OneV2H+OneV1L+OneTL      ;HHL-HHL
        DC      CLK2+P_DELAY+OUTGH+TwoTH+TwoV1L+TwoV2H+TwoV3L+OneV3L+OneV2H+OneV1L+OneTL      ;LHL-LHL
        DC      CLK2+P_DELAY+OUTGH+TwoTH+TwoV1L+TwoV2H+TwoV3H+OneV3L+OneV2H+OneV1H+OneTL      ;LHH-LHH
        DC      CLK2+P_DELAY+OUTGH+TwoTH+TwoV1L+TwoV2L+TwoV3H+OneV3L+OneV2L+OneV1H+OneTL      ;LLH-LLH
        DC      CLK2+P_DELAY+OUTGH+TwoTH+TwoV1H+TwoV2L+TwoV3H+OneV3H+OneV2L+OneV1H+OneTH      ;HLH-HLH + shut TG
PARALLEL_2
        DC      PARALLEL_12-PARALLEL_2-1
        DC      CLK2+P_DELAY+OUTGH+TwoTL+TwoV1H+TwoV2L+TwoV3H+OneV3H+OneV2L+OneV1H+OneTH      ;HLH-HLH
        DC      CLK2+P_DELAY+OUTGH+TwoTL+TwoV1L+TwoV2L+TwoV3H+OneV3L+OneV2L+OneV1H+OneTH      ;LLH-LLH
        DC      CLK2+P_DELAY+OUTGH+TwoTL+TwoV1L+TwoV2H+TwoV3H+OneV3L+OneV2H+OneV1H+OneTH      ;LHH-LHH
        DC      CLK2+P_DELAY+OUTGH+TwoTL+TwoV1L+TwoV2H+TwoV3L+OneV3L+OneV2H+OneV1L+OneTH      ;LHL-LHL
        DC      CLK2+P_DELAY+OUTGH+TwoTL+TwoV1H+TwoV2H+TwoV3L+OneV3H+OneV2H+OneV1L+OneTH      ;HHL-HHL
        DC      CLK2+P_DELAY+OUTGH+TwoTL+TwoV1H+TwoV2L+TwoV3L+OneV3H+OneV2L+OneV1L+OneTH      ;HLL-HLL
        DC      CLK2+P_DELAY+OUTGH+TwoTH+TwoV1H+TwoV2L+TwoV3H+OneV3H+OneV2L+OneV1H+OneTH      ;HLH-HLH + shut TG
PARALLEL_12
        DC      END_PARALLEL-PARALLEL_12-1
        DC      CLK2+P_DELAY+OUTGH+TwoTL+TwoV1H+TwoV2L+TwoV3H+OneV3H+OneV2L+OneV1H+OneTL      ;HLH-HLH
        DC      CLK2+P_DELAY+OUTGH+TwoTL+TwoV1L+TwoV2L+TwoV3H+OneV3H+OneV2L+OneV1L+OneTL      ;LLH-HLL
        DC      CLK2+P_DELAY+OUTGH+TwoTL+TwoV1L+TwoV2H+TwoV3H+OneV3H+OneV2H+OneV1L+OneTL      ;LHH-HHL
        DC      CLK2+P_DELAY+OUTGH+TwoTL+TwoV1L+TwoV2H+TwoV3L+OneV3L+OneV2H+OneV1L+OneTL      ;LHL-LHL
        DC      CLK2+P_DELAY+OUTGH+TwoTL+TwoV1H+TwoV2H+TwoV3L+OneV3L+OneV2H+OneV1H+OneTL      ;HHL-LHH
        DC      CLK2+P_DELAY+OUTGH+TwoTL+TwoV1H+TwoV2L+TwoV3L+OneV3L+OneV2L+OneV1H+OneTL      ;HLL-LLH
        DC      CLK2+P_DELAY+OUTGH+TwoTH+TwoV1H+TwoV2L+TwoV3H+OneV3H+OneV2L+OneV1H+OneTH      ;HLH-HLH
END_PARALLEL


;******************************
;*   SERIAL REGISTER SECTION  *
;******************************
;
;For this section, one needs to remember the
;Video processor bit definition: [xfer, A/D, integ, Pol+, Pol-, DCrestore, rst   (1 => switch open) ]
;
;The ordering of the clocks (normal configuration) is:
;Both amps is H1->H2->H3 - wtf does this mean?
;L amp is H1->H2->H3
;U amp is H3->H2->H1


;*************************************************************************
;Note: SERIAL_IDLE has been removed because the idle routine
;now runs the same waveform as LR.
;*************************************************************************



;These are some random routines that need to be defined because the symbols are defined somewhere else.

VIDEO_PROCESS
        DC      END_VIDEO-VIDEO_PROCESS-1
SXMIT   DC      $00F040                 ; Transmit A/D data to host
END_VIDEO

;********************
;This is the non-desctructive charge readout (NDCR) routine
;for a skipper CCD.
;This part just cycles the charge between SW, OG and SN.
;This routine is common for L, R and LR since no serial register
;clocks are operated.
;********************

PIT_SK_NDCR_SERIAL_READ
        DC	END_PIT_SK_NDCR_SERIAL_READ-PIT_SK_NDCR_SERIAL_READ-1
                 
        ;Prepare the ADC for sampling.
        ;Reset integrator
        ;Input video signal to ground clamp
        ;Non-inverting mode
        DC      VIDEO+$000000+%1110100
        ;Maybe: add wait time S_DELAY to hold this reset state.
        ;since ordinarily there would be a couple of serial register cycles
        ;this state would hold.
        ;DC      VIDEO+VE_DELAY+%1110100
        ;DC	VIDEO+PRE_SET_DLY

        ;Close H3 so the charges cannot move back to SR. PRD also replaces
        ;VE_DELAY since this takes care of the delay of the video flush.
PRD0    DC      CLK3+RH+DUMPGH+HL1H+HL2L+HL3H+HU1H+HU2L+HU3H+WL

	;Measure the pedestal	
        DC      VIDEO+$000000+%1110111  ; (1) -> StopDCRestore and (0) -> StopResetIntegrator
DLY0    DC      VIDEO+%0000111  ; Integrate for Y:<I_DELAY microsec
        ;DC      VIDEO+I_DELAY+%0000111  ; Integrate for I_DELAY microsec
        DC      VIDEO+$000000+%0011011  ; (4) -> Stop Integration and (3,2)-> sel inverting int.
	
	
        ;Move charge to Sense node by SW->hi OUTG->Hi
        DC	CLK3+SW_DELAY+HU1H+HU2L+HU3H+HL1H+HL2L+HL3H+DUMPGH+RH+WH
POD0	DC	CLK3+HU1H+HU2L+HU3H+HL1H+HL2L+HL3H+DUMPGH+RH+WL
        ;DC	CLK3+POST_SET_DLY+HU1H+HU2L+HU3H+HL1H+HL2L+HL3H+RH+WL


	;Read the signal, using inverting amp right over the measured value of the pedestal
DLY1    DC      VIDEO+%0001011
        ;DC      VIDEO+I_DELAY+%0001011  ; Integrate for I_DELAY microsec
        DC      VIDEO+$000000+%0011011  ; (4)->StopIntegrator
	;(6) -> On low to high, transfer ADC output to a latch
	;(5) -> On low to high start ADC sample/hold and conversion 
        DC      VIDEO+DCRST_DELAY+%1110111      

        ;Move charge back to SW by setting SW->Lo and OUTG->Lo
        ;DC	CLK3+SW_DELAY+HU1H+HU2L+HU3H+HL1H+HL2L+HL3H+RH+WL
        DC      CLK2+SW_DELAY+TwoTH+TwoV1H+TwoV2L+TwoV3H+OneV3H+OneV2L+OneV1H+OneTH+OUTGL ;Move OUTG->lo to to move charge SN->OG->SW
        DC      CLK2+SW_DELAY+TwoTH+TwoV1H+TwoV2L+TwoV3H+OneV3H+OneV2L+OneV1H+OneTH+OUTGH ;Move OUTG->high to keep charges in SW.

        ;Before the skipper cycle begins again, we will reset the sense node once.
        DC      CLK3+S_DELAY+HU1H+HU2L+HU3H+HL1H+HL2L+HL3H+DUMPGH+WL+RL ;Reset->low
        DC      CLK3+S_DELAY+HU1H+HU2L+HU3H+HL1H+HL2L+HL3H+DUMPGH+WL+RH ;Reset->high

END_PIT_SK_NDCR_SERIAL_READ

;********************
;This is the DES CCD Readout routine
;for a DESI amplifier type CCD.
;This part runs in a DESI amplifier instead of PIT_SK_NDCR_SERIAL_READ
;This routine is common for L, R and LR since no serial register
;clocks are operated.
;********************

PIT_DESI_SERIAL_READ
        DC	END_PIT_DESI_SERIAL_READ-PIT_DESI_SERIAL_READ-1

        ;Prepare the ADC for sampling.
        ;Reset integrator
        ;Input video signal to ground clamp
        ;Non-inverting mode
        DC      VIDEO+$000000+%1110100
        ;Maybe: add wait time S_DELAY to hold this reset state.
        ;since ordinarily there would be a couple of serial register cycles
        ;this state would hold.
        ;DC      VIDEO+VE_DELAY+%1110100
        ;DC	VIDEO+PRE_SET_DLY

        ;Close H3 so the charges cannot move back to SR. PRD also replaces
        ;VE_DELAY since this takes care of the delay of the video flush.
PRD1    DC      CLK3+RH+DUMPGH+HL1H+HL2L+HL3H+HU1H+HU2L+HU3H+WL


        ;Measure the pedestal
        DC      VIDEO+$000000+%1110111  ; (1) -> StopDCRestore and (0) -> StopResetIntegrator
DLY2    DC      VIDEO+%0000111  ; Integrate for Y:<I_DELAY microsec
        DC      VIDEO+$000000+%0011011  ; (4) -> Stop Integration and (3,2)-> sel inverting int.


        ;Move charge to Sense node by SW->hi and then SW->lo, in a pulse mode sequence
        DC	CLK3+SW_DELAY+HU1H+HU2L+HU3H+HL1H+HL2L+HL3H+DUMPGH+RH+WH
POD1    DC	CLK3+HU1H+HU2L+HU3H+HL1H+HL2L+HL3H+DUMPGH+RH+WL


        ;Read the signal, using inverting amp right over the measured value of the pedestal
DLY3    DC      VIDEO+%0001011
        DC      VIDEO+$000000+%0011011  ; (4)->StopIntegrator
        ;(6) -> On low to high, transfer ADC output to a latch
        ;(5) -> On low to high start ADC sample/hold and conversion
        DC      VIDEO+DCRST_DELAY+%1110111

        ;Since in a DESI amplifier we do not send the charge back to the SW,
        ;we dont have to do a reset. That happens with the H-clock movements anyways.


END_PIT_DESI_SERIAL_READ

;*********************************
;Function to read the memory.
;This gets executed only if read
;routines are selected and not
;if IDLE is run
;*********************************
SK_SEND_BUFFER
        DC	END_SK_SEND_BUFFER-SK_SEND_BUFFER-1
SXA2    DC      $00F040
        ;DC      VIDEO+VE_DELAY+%1110100
END_SK_SEND_BUFFER


;*********************************
;Stage 2 serial read will dump the charges on SW
;and OG to the dump drain.
;This routine is common for L, R and LR since no serial register
;clocks are operated.
;*********************************

SERIAL_READ_CLRCHG_STAGE_2
	DC      END_SERIAL_READ_CLRCHG_STAGE_2-SERIAL_READ_CLRCHG_STAGE_2-1
        ;We need to dump the charges here
        DC      CLK3+SW_DELAY+HU1H+HU2L+HU3H+HL1H+HL2L+HL3H+DUMPGL+WH+RH ;SW->hi and Dump->lo
        DC      CLK3+SW_DELAY+HU1H+HU2L+HU3H+HL1H+HL2L+HL3H+DUMPGH+WH+RH ;Dump->high

        ;Note: A reset happens after the last ops.
        ;Another one will happoen before first ops. We dont need a reset here.

END_SERIAL_READ_CLRCHG_STAGE_2


;*********************************
;Stage 1 for each amplifier is different.
;This is where the charges are clocked
;on the serial register and pushed to the SW.
;
;This routine is different for L, R and LR and is run once per pixel.
;
;The line with PRE_SET_DLY is the same in all the 3 sequences.
;In the interest of being able to manipulate PRE_SET_DLY
;I am moving the line to inside the read routines.
;*********************************

SERIAL_READ_L_STAGE1
        DC      END_SERIAL_READ_L_STAGE1-SERIAL_READ_L_STAGE1-1
        ;DC      VIDEO+$000000+%1110100  ; NonInv,DCRestore,StrtRstInt - line probably not needed here
        DC      CLK3+S_DELAY+DUMPGH+RH+HU1H+HU2L+HU3H+HL1H+HL2L+HL3H+WL       ;
        DC      CLK3+S_DELAY+DUMPGH+RL+HU1L+HU2L+HU3H+HL1L+HL2L+HL3H+WL       ;h1->lo, Reset on
        DC      CLK3+S_DELAY+DUMPGH+RH+HU1L+HU2H+HU3H+HL1L+HL2H+HL3H+WL       ;h2->hi, reset off
        DC      CLK3+S_DELAY+DUMPGH+RH+HU1L+HU2H+HU3L+HL1L+HL2H+HL3L+WL       ;h3->lo
        DC      CLK3+S_DELAY+DUMPGH+RH+HU1H+HU2H+HU3L+HL1H+HL2H+HL3L+WL       ;h1->hi
        DC      CLK3+S_DELAY+DUMPGH+RH+HU1H+HU2L+HU3L+HL1H+HL2L+HL3L+WL       ;h2->lo
;PRD0    DC      CLK3+RH+HU1H+HU2L+HU3H+HL1H+HL2L+HL3H+WL   ;h3->hi, Delay
        ;DC      CLK3+PRE_SET_DLY+RH+HL1H+HL2L+HL3H+HU1H+HU2L+HU3H+WL
END_SERIAL_READ_L_STAGE1

SERIAL_READ_R_STAGE1
        DC      END_SERIAL_READ_R_STAGE1-SERIAL_READ_R_STAGE1-1
        ;DC      VIDEO+$000000+%1110100  ; NonInv,DCRestore,StrtRstInt. - line probably not needed here.
        DC      CLK3+S_DELAY+DUMPGH+RH+HU1H+HU2L+HU3H+HL1H+HL2L+HL3H+WL       ;        Reset_On, SW->lo
        DC      CLK3+S_DELAY+DUMPGH+RL+HU1H+HU2L+HU3L+HL1H+HL2L+HL3L+WL       ;h3->lo
        DC      CLK3+S_DELAY+DUMPGH+RH+HU1H+HU2H+HU3L+HL1H+HL2H+HL3L+WL       ;h2->hi
        DC      CLK3+S_DELAY+DUMPGH+RH+HU1L+HU2H+HU3L+HL1L+HL2H+HL3L+WL       ;h1->lo
        DC      CLK3+S_DELAY+DUMPGH+RH+HU1L+HU2H+HU3H+HL1L+HL2H+HL3H+WL       ;h3->hi
        DC      CLK3+S_DELAY+DUMPGH+RH+HU1L+HU2L+HU3H+HL1L+HL2L+HL3H+WL       ;h2->lo
;PRD1    DC      CLK3+RH+HU1H+HU2L+HU3H+HL1H+HL2L+HL3H+WL   ;h1->hi, Delay
        ;DC      CLK3+PRE_SET_DLY+RH+HL1H+HL2L+HL3H+HU1H+HU2L+HU3H+WL
END_SERIAL_READ_R_STAGE1

SERIAL_READ_LR_STAGE1
        DC      END_SERIAL_READ_LR_STAGE1-SERIAL_READ_LR_STAGE1-1
        ;DC      VIDEO+$000000+%1110100  ; ADCLatch,NonInv,DCRestore,StrtRstInt. - line probably not needed here.
        DC      CLK3+S_DELAY+DUMPGH+RH+HL1H+HL2L+HL3H+HU1H+HU2L+HU3H+WL           ;                   SW->lo
        DC      CLK3+S_DELAY+DUMPGH+RL+HL1L+HL2L+HL3H+HU1H+HU2L+HU3L+WL           ;HL1->lo, HU3->lo  ,reset on
        DC      CLK3+S_DELAY+DUMPGH+RH+HL1L+HL2H+HL3H+HU1H+HU2H+HU3L+WL           ;Hx2->hi           ,reset off
        DC      CLK3+S_DELAY+DUMPGH+RH+HL1L+HL2H+HL3L+HU1L+HU2H+HU3L+WL           ;HL3->lo, HU1->Lo
        DC      CLK3+S_DELAY+DUMPGH+RH+HL1H+HL2H+HL3L+HU1L+HU2H+HU3H+WL           ;HL1->hi, HU3->hi
        DC      CLK3+S_DELAY+DUMPGH+RH+HL1H+HL2L+HL3L+HU1L+HU2L+HU3H+WL           ;Hx2->lo
;PRD2    DC      CLK3+RH+HL1H+HL2L+HL3H+HU1H+HU2L+HU3H+WL       ;HL3->hi, HU1->hi, Delay
        ;DC      CLK3+PRE_SET_DLY+RH+HL1H+HL2L+HL3H+HU1H+HU2L+HU3H+WL
END_SERIAL_READ_LR_STAGE1


;*********************************
;Skip a measurement sequence - the name "skipper" comes from
;using these on "non-interesting" pixels.
;we probably will never use them, but the implementation is here
;for completeness.
;
;This routine is different for L, R and LR and is run once per pixel.
;*********************************


; These are the three skipping tables. Make sure they're all the same length
SERIAL_SKIP_L           ; Serial clocking waveform for skipping left
        DC	END_SERIAL_SKIP_L-SERIAL_SKIP_L-1

        ;Reset integrator
        ;Input video signal to ground clamp
        ;Non-inverting mode
        DC      VIDEO+$000000+%1110100

        DC      CLK3+S_DELAY+DUMPGH+RL+HU1H+HU2L+HU3H+HL1H+HL2L+HL3H+WL
        DC      CLK3+S_DELAY+DUMPGH+RH+HU1L+HU2L+HU3H+HL1L+HL2L+HL3H+WL ;h1->lo
        DC      CLK3+S_DELAY+DUMPGH+RH+HU1L+HU2H+HU3H+HL1L+HL2H+HL3H+WL ;h2->hi
        DC      CLK3+S_DELAY+DUMPGH+RH+HU1L+HU2H+HU3L+HL1L+HL2H+HL3L+WL ;h3->lo
        DC      CLK3+S_DELAY+DUMPGH+RH+HU1H+HU2H+HU3L+HL1H+HL2H+HL3L+WL ;h1->hi
        DC      CLK3+S_DELAY+DUMPGH+RH+HU1H+HU2L+HU3L+HL1H+HL2L+HL3L+WL ;h2->lo
        DC      CLK3+S_DELAY+DUMPGH+RL+HU1H+HU2L+HU3H+HL1H+HL2L+HL3H+WL ;h3->hi, Reset_Off+Delay
        ;add step for OG->hi
        DC      CLK3+SW_DELAY+DUMPGH+RL+HU1H+HU2L+HU3H+HL1H+HL2L+HL3H+WH ;SW->hi and flush the charge

END_SERIAL_SKIP_L

SERIAL_SKIP_R           ; Serial clocking waveform for skipping right
        DC	END_SERIAL_SKIP_R-SERIAL_SKIP_R-1

        ;Reset integrator
        ;Input video signal to ground clamp
        ;Non-inverting mode
        DC      VIDEO+$000000+%1110100

        DC      CLK3+S_DELAY+DUMPGH+RL+HU1H+HU2L+HU3H+HL1H+HL2L+HL3H+WL
        DC      CLK3+S_DELAY+DUMPGH+RH+HU1H+HU2L+HU3L+HL1H+HL2L+HL3L+WL ;h3->lo
        DC      CLK3+S_DELAY+DUMPGH+RH+HU1H+HU2H+HU3L+HL1H+HL2H+HL3L+WL ;h2->hi
        DC      CLK3+S_DELAY+DUMPGH+RH+HU1L+HU2H+HU3L+HL1L+HL2H+HL3L+WL ;h1->lo
        DC      CLK3+S_DELAY+DUMPGH+RH+HU1L+HU2H+HU3H+HL1L+HL2H+HL3H+WL ;h3->hi
        DC      CLK3+S_DELAY+DUMPGH+RH+HU1L+HU2L+HU3H+HL1L+HL2L+HL3H+WL ;h2->lo
        DC      CLK3+S_DELAY+DUMPGH+RL+HU1H+HU2L+HU3H+HL1H+HL2L+HL3H+WL ;h1->hi, Reset_Off+Delay
        ;add step for OG->hi
        DC      CLK3+SW_DELAY+DUMPGH+RL+HU1H+HU2L+HU3H+HL1H+HL2L+HL3H+WH ;SW->hi and flush the charge
END_SERIAL_SKIP_R

SERIAL_SKIP_LR          ; Serial clocking waveform for skipping both ends
        DC	END_SERIAL_SKIP_LR-SERIAL_SKIP_LR-1

        ;Reset integrator
        ;Input video signal to ground clamp
        ;Non-inverting mode
        DC      VIDEO+$000000+%1110100

        DC      CLK3+S_DELAY+DUMPGH+RL+HU1H+HU2L+HU3H+HL1H+HL2L+HL3H+WL ;
        DC      CLK3+S_DELAY+DUMPGH+RH+HU1H+HU2L+HU3L+HL1L+HL2L+HL3H+WL ;HU3->lo, HL1->lo
        DC      CLK3+S_DELAY+DUMPGH+RH+HU1H+HU2H+HU3L+HL1L+HL2H+HL3H+WL ;Hx2->hi
        DC      CLK3+S_DELAY+DUMPGH+RH+HU1L+HU2H+HU3L+HL1L+HL2H+HL3L+WL ;HU1->lo, HL3->lo
        DC      CLK3+S_DELAY+DUMPGH+RH+HU1L+HU2H+HU3H+HL1H+HL2H+HL3L+WL ;HU3->hi, HL3->hi
        DC      CLK3+S_DELAY+DUMPGH+RH+HU1L+HU2L+HU3H+HL1H+HL2L+HL3L+WL ;Hx2->lo
        DC      CLK3+S_DELAY+DUMPGH+RL+HU1H+HU2L+HU3H+HL1H+HL2L+HL3H+WL ;HU1->hi, HL3->hi, Reset_Off+Delay
        ;add step for OG->hi
        DC      CLK3+SW_DELAY+DUMPGH+RL+HU1H+HU2L+HU3H+HL1H+HL2L+HL3H+WH ;SW->hi --> flush charges
END_SERIAL_SKIP_LR

;brought in and guestafied 4/7/2011 r.a.
PARALLELS_DURING_EXPOSURE
	DC	END_PARALLELS_DURING_EXPOSURE-PARALLELS_DURING_EXPOSURE-1
        ;DC	CLK3+0000000+00+00+V3H+TH	;   during exposure
END_PARALLELS_DURING_EXPOSURE

;brought in and guestafied for new roi code in the 8.1misc.asm code r.a. 8/21/2011
PARALLELS_DURING_READOUT
	DC	END_PARALLELS_DURING_READOUT-PARALLELS_DURING_READOUT-1
        ;DC	CLK3+P_DELAY+V1H+00+V3H+TH     ;tg>th added fs*h/L to this.. right? r.a.
END_PARALLELS_DURING_READOUT

; persistent image erase voltage tables
; Removed 11/7/05 at UM
VSUBN
        
ERHI    DC EREND-ERHI-1

EREND   DC EREND2-EREND-1
          
EREND2

; Bias voltages for the LBL CCD
BZERO           EQU     7.5     ; Zero Bias
Vsub            EQU     30.0    ; Substrate Voltage
OutDrain        EQU     -10.0   ; Output Drain
OutGate         EQU     3.50    ; Output Gate (was 2.16)
RstDrain        EQU     -10.0   ; Reset Drain
Btest           EQU     0.5     ; bias test voltage

; Define high and low clock levels
CK_ZERO         EQU     0.0
VCLK_HI         EQU     5.0
VCLK_LO         EQU     -5.0
HCLK_HI         EQU     4.0 
HCLK_LO         EQU     -4.0 
TGATE_HI        EQU     5.0
TGATE_LO        EQU     -3.0

RGATE_HI        EQU     1.0
RGATE_LO        EQU     -6.0


W_HI            EQU     3.0
W_LO            EQU     -4.0

OUTG_HI		EQU	2.0
OUTG_LO		EQU	-2.0

DG_HI		EQU	5.0
DG_LO		EQU	-6.0



; Initialization of clock driver and video processor DACs and switches
DACS    DC      END_DACS-DACS-1

; Set gain and integrator speed. x 1 gain, FAST integrate
        DC      $0c3cbb                 ; Gain, integrate speed, board #0

; Set the levels on the clock board
	DC	$2A0080					; DAC = unbuffered mode
        DC	$200100+@CVI((VCLK_HI+Vmax)/(2*Vmax)*255)	; Pin #1, OneV1L
	DC	$200200+@CVI((VCLK_LO+Vmax)/(2*Vmax)*255)
        DC	$200400+@CVI((VCLK_HI+Vmax)/(2*Vmax)*255)	; Pin #2, OneV2L
	DC	$200800+@CVI((VCLK_LO+Vmax)/(2*Vmax)*255)
        DC	$202000+@CVI((VCLK_HI+Vmax)/(2*Vmax)*255)	; Pin #3, OneV3L
	DC	$204000+@CVI((VCLK_LO+Vmax)/(2*Vmax)*255)
        DC	$208000+@CVI((VCLK_HI+Vmax)/(2*Vmax)*255)	; Pin #4, TwoV1L
        DC	$210000+@CVI((VCLK_LO+Vmax)/(2*Vmax)*255)
        DC	$220100+@CVI((VCLK_HI+Vmax)/(2*Vmax)*255)	; Pin #5, TwoV2L
        DC	$220200+@CVI((VCLK_LO+Vmax)/(2*Vmax)*255)
        DC	$220400+@CVI((VCLK_HI+Vmax)/(2*Vmax)*255)	; Pin #6, TwoV3L
        DC	$220800+@CVI((VCLK_LO+Vmax)/(2*Vmax)*255)
	DC	$222000+@CVI((TGATE_HI+Vmax)/(2*Vmax)*255)	; Pin #7, Trans Gate
	DC	$224000+@CVI((TGATE_LO+Vmax)/(2*Vmax)*255)
        DC	$228000+@CVI((OUTG_HI+Vmax)/(2*Vmax)*255)	; Pin #8, OG_1 / OUTG
        DC	$230000+@CVI((OUTG_LO+Vmax)/(2*Vmax)*255)
        DC	$240100+@CVI((TGATE_HI+Vmax)/(2*Vmax)*255)		; Pin #9, Trans gate
        DC	$240200+@CVI((TGATE_LO+Vmax)/(2*Vmax)*255)
        DC	$240400+@CVI((OUTG_HI+Vmax)/(2*Vmax)*255)	; Pin #10, OG_2 / OUTG
        DC	$240800+@CVI((OUTG_LO+Vmax)/(2*Vmax)*255)
        DC	$242000+@CVI((CK_ZERO+Vmax)/(2*Vmax)*255)		; Pin #11, Unused
        DC	$244000+@CVI((CK_ZERO+Vmax)/(2*Vmax)*255)
	DC	$248000+@CVI((CK_ZERO+Vmax)/(2*Vmax)*255)	; Pin #12, Unused
	DC	$250000+@CVI((CK_ZERO+Vmax)/(2*Vmax)*255)        

	DC	$260100+@CVI((HCLK_HI+Vmax)/(2*Vmax)*255)	; Pin #13, HU1
	DC	$260200+@CVI((HCLK_LO+Vmax)/(2*Vmax)*255)
	DC	$260400+@CVI((HCLK_HI+Vmax)/(2*Vmax)*255)	; Pin #14, HU2
	DC	$260800+@CVI((HCLK_LO+Vmax)/(2*Vmax)*255)
	DC	$262000+@CVI((HCLK_HI+Vmax)/(2*Vmax)*255)	; Pin #15, HU3
	DC	$264000+@CVI((HCLK_LO+Vmax)/(2*Vmax)*255)
	DC	$268000+@CVI((HCLK_HI+Vmax)/(2*Vmax)*255)	; Pin #16, HL1
	DC	$270000+@CVI((HCLK_LO+Vmax)/(2*Vmax)*255)
	DC	$280100+@CVI((HCLK_HI+Vmax)/(2*Vmax)*255)	; Pin #17, HL2
	DC	$280200+@CVI((HCLK_LO+Vmax)/(2*Vmax)*255)
	DC	$280400+@CVI((HCLK_HI+Vmax)/(2*Vmax)*255)	; Pin #18, HL3
	DC	$280800+@CVI((HCLK_LO+Vmax)/(2*Vmax)*255)
        DC	$282000+@CVI((W_HI+Vmax)/(2*Vmax)*255)		; Pin #19, SW_L/W
        DC	$284000+@CVI((W_LO+Vmax)/(2*Vmax)*255)
        DC	$288000+@CVI((DG_HI+Vmax)/(2*Vmax)*255)         ; Pin #33, DG_1
        DC	$290000+@CVI((DG_LO+Vmax)/(2*Vmax)*255)
	DC	$2A0100+@CVI((RGATE_HI+Vmax)/(2*Vmax)*255)	; Pin #34, Reset Gate
	DC	$2A0200+@CVI((RGATE_LO+Vmax)/(2*Vmax)*255)
        DC	$2A0400+@CVI((DG_HI+Vmax)/(2*Vmax)*255)	; Pin #35, DG_2
        DC	$2A0800+@CVI((DG_LO+Vmax)/(2*Vmax)*255)
        DC	$2A2000+@CVI((RGATE_HI+Vmax)/(2*Vmax)*255)	; Pin #36, Reset Gate
        DC	$2A4000+@CVI((RGATE_LO+Vmax)/(2*Vmax)*255)
        DC	$2A8000+@CVI((W_HI+Vmax)/(2*Vmax)*255)		; Pin #37, SW_U/W
        DC	$2B0000+@CVI((W_LO+Vmax)/(2*Vmax)*255)

; Set the voltages on the video board 25 pin connector for ARC45 video board
        DC      $0d0000+@CVI((Vsub-7.5)/22.5*4095)      ; pin 1 - Vsub
        DC      $0d4000+@CVI((BZERO-7.5)/22.5*4095)     ; pin 2
        DC      $0c0000+@CVI((BZERO-5)/15*4095)         ; pin 3
        DC      $0c4000+@CVI((BZERO-5)/15*4095)         ; pin 4
        DC      $0d8000+@CVI((BZERO-7.5)/22.5*4095)     ; pin 5
        DC      $0dc000+@CVI((BZERO-7.5)/22.5*4095)     ; pin 6
        DC      $0e0000+@CVI((OutDrain+10)/20*4095)     ; pin 9 - Reset Drain
        DC      $0e4000+@CVI((RstDrain+10)/20*4095)     ; pin 10 - Out Drain
        DC      $0e8000+@CVI((OutGate+10)/20*4095)      ; pin 11 - Out Gate
        DC      $0ec000+@CVI((BZERO+10)/20*4095)        ; pin 12
        DC      $0C8600                                 ; OUTOFFA = 000 sg 2007-05-23
END_DACS

        
      
